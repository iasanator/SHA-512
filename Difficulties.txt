I chose to implement SHA-512 in Java because I think that I am most familiar with the language and I thought that having done the AES project in Java, I would have lots of the basic building blocks needed to implement SHA. Unfortunately, there are some significant differences between AES and SHA in the way that they handle bits that makes it much more difficult to do. Basically I'm writing this in the hopes that even though I didn't get my SHA algorithm working, you can see where I struggled with the project and that I do understand the concepts of SHA and maybe get partial credit on the assignment.

The biggest problem I faced was the way that java handles its primitive data types. I tried for about five hours to read in the file in different ways in order to just get a byte array of the contents of the file. Nothing I tried worked. I used a Scanner and tried to call read bytes, but it wouldn't read anything in because it wouldn't split a character in the text into its individual bytes. The next step was to try to read in characters and parse them into their individual bytes. The problem here was that bytes are signed and the actual binary for a character was multiple bytes long. the way I worked around this in AES was to use shorts (2 bytes) and when doing math on shorts, I was able to pretend like they were all unsigned bytes.

This problem shows up in several other places. Simply doing the word-by-word addition mod 2^64 was infuriating because I needed to concatenate the bytes together to get my words. But I couldn't turn them into a long because that is signed and having a leading 1 would mess the addition up. I tried to make a workaround solution where I turned the bytes into strings and concatenated them together and then couldn't figure out how to turn that back into a data type that could perform the addition.



